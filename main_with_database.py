"""
Main game loop with database backend and player management.
"""
import pygame
import sys
from farming_game.data.data_classes import Position, InteractionResult
from farming_game.data.constants import *
from farming_game.core.game_manager import GameManager
from farming_game.ui.renderer import UI
from farming_game.ui.player_ui import PlayerSelectionUI

class DatabaseFarmingGame:
    """Main game class with database backend."""
    
    def __init__(self):
        pygame.init()
        self.screen = pygame.display.set_mode((WINDOW_WIDTH, WINDOW_HEIGHT))
        pygame.display.set_caption("Farming & Foraging Game - Database Edition")
        self.clock = pygame.time.Clock()
        
        # Game state
        self.state = "player_select"  # player_select, playing
        self.running = True
        
        # UI components
        self.player_ui = PlayerSelectionUI(self.screen)
        self.game_manager = None
        self.ui = None
        
        # Game variables (initialized when game starts)
        self.message = ""
        self.message_timer = 0
        self.plant_types = ["carrot", "tomato", "melon"]
        self.selected_inventory_item = None
        self.selected_inventory_index = 0
        self.last_move_time = 0
        self.move_delay = MOVEMENT_DELAY
    
    def start_game(self, player_id: int, save_id: int = None):
        """Initialize game with selected player and save."""
        try:
            self.game_manager = GameManager(player_id=player_id, save_id=save_id)
            self.ui = UI(self.screen)
            self.state = "playing"
            print(f"Game started for player {player_id}" + (f", save {save_id}" if save_id else " (new game)"))\n        except Exception as e:\n            print(f"Failed to start game: {e}")\n            self.show_message(f"Failed to start game: {e}")\n    \n    def run(self):\n        \"\"\"Main game loop.\"\"\"\n        while self.running:\n            if self.state == "player_select":\n                self.run_player_select()\n            elif self.state == "playing":\n                self.run_game()\n            \n        # Cleanup\n        if self.game_manager:\n            self.game_manager.close()\n        self.player_ui.close()\n        pygame.quit()\n        sys.exit()\n    \n    def run_player_select(self):\n        \"\"\"Run player selection UI.\"\"\"\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                self.running = False\n                return\n            \n            result = self.player_ui.handle_event(event)\n            if result:\n                if result["action"] == "quit":\n                    self.running = False\n                elif result["action"] == "new_game":\n                    self.start_game(result["player_id"])\n                elif result["action"] == "load_save":\n                    self.start_game(result["player_id"], result["save_id"])\n        \n        self.player_ui.update()\n        self.player_ui.draw()\n        self.clock.tick(FPS)\n    \n    def run_game(self):\n        \"\"\"Run main game loop.\"\"\"\n        delta_time = self.clock.tick(FPS) / 1000.0\n        \n        self.handle_events()\n        self.update(delta_time)\n        self.draw()\n    \n    def handle_events(self):\n        \"\"\"Handle game events.\"\"\"\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                self.running = False\n            elif event.type == pygame.KEYDOWN:\n                self.handle_keypress(event.key)\n        \n        # Handle continuous movement with held keys\n        self.handle_held_keys()\n    \n    def handle_keypress(self, key):\n        \"\"\"Handle key press events.\"\"\"\n        player = self.game_manager.player\n        plant_system = self.game_manager.plant_system\n        forage_system = self.game_manager.forage_system\n        storage = self.game_manager.storage_system\n        \n        # Inventory selection with TAB\n        if key == pygame.K_TAB:\n            self.cycle_inventory_selection()\n        \n        # Actions\n        elif key == pygame.K_SPACE or key == pygame.K_p:\n            self.plant_seed()\n        elif key == pygame.K_e:\n            self.water_plant()\n        elif key == pygame.K_h:\n            self.harvest_plant()\n        elif key == pygame.K_f:\n            self.forage_item()\n        elif key == pygame.K_b:\n            self.buy_seeds()\n        elif key == pygame.K_x:\n            self.ship_items()\n        \n        # Database save/load\n        elif key == pygame.K_s and pygame.key.get_pressed()[pygame.K_LCTRL]:\n            if self.game_manager.save_game_to_database():\n                self.show_message("Game saved to database!")\n            else:\n                self.show_message("Failed to save to database!")\n        \n        # JSON save/load (legacy)\n        elif key == pygame.K_q and pygame.key.get_pressed()[pygame.K_LCTRL]:\n            if self.game_manager.save_game():\n                self.show_message("Game saved to JSON!")\n            else:\n                self.show_message("JSON save failed!")\n        elif key == pygame.K_l and pygame.key.get_pressed()[pygame.K_LCTRL]:\n            if self.game_manager.load_game():\n                self.show_message("Game loaded from JSON!")\n            else:\n                self.show_message("JSON load failed!")\n        \n        # Return to player select\n        elif key == pygame.K_ESCAPE:\n            self.state = "player_select"\n            if self.game_manager:\n                self.game_manager.close()\n                self.game_manager = None\n            self.ui = None\n    \n    def handle_held_keys(self):\n        \"\"\"Handle continuous movement when keys are held down.\"\"\"\n        current_time = pygame.time.get_ticks()\n        \n        if current_time - self.last_move_time < self.move_delay:\n            return\n        \n        keys = pygame.key.get_pressed()\n        player = self.game_manager.player\n        moved = False\n        \n        if keys[pygame.K_w] or keys[pygame.K_UP]:\n            moved = player.move(Position(0, -1))\n        elif keys[pygame.K_s] or keys[pygame.K_DOWN]:\n            moved = player.move(Position(0, 1))\n        elif keys[pygame.K_a] or keys[pygame.K_LEFT]:\n            moved = player.move(Position(-1, 0))\n        elif keys[pygame.K_d] or keys[pygame.K_RIGHT]:\n            moved = player.move(Position(1, 0))\n        \n        if moved:\n            self.last_move_time = current_time\n    \n    def cycle_inventory_selection(self):\n        \"\"\"Cycle through inventory items.\"\"\"\n        max_slots = MAX_INVENTORY_SLOTS\n        inventory_slots = [None]  # Empty hands\n        inventory_slots.extend(list(self.game_manager.player.inventory.keys()))\n        \n        empty_slot_count = 0\n        while len(inventory_slots) < max_slots:\n            inventory_slots.append(f"empty_slot_{empty_slot_count}")\n            empty_slot_count += 1\n        \n        self.selected_inventory_index = (self.selected_inventory_index + 1) % len(inventory_slots)\n        self.selected_inventory_item = inventory_slots[self.selected_inventory_index]\n        \n        if self.selected_inventory_item is None:\n            self.show_message("Empty hands selected")\n        elif self.selected_inventory_item.startswith("empty_slot"):\n            slot_num = self.selected_inventory_index\n            self.show_message(f"Empty slot {slot_num} selected")\n        else:\n            self.show_message(f"Selected: {self.selected_inventory_item}")\n    \n    def plant_seed(self):\n        \"\"\"Plant selected seed.\"\"\"\n        if not self.selected_inventory_item or not self.selected_inventory_item.endswith("_seeds"):\n            self.show_message("Select seeds first!")\n            return\n        \n        plant_type = self.selected_inventory_item.replace("_seeds", "")\n        result = self.game_manager.plant_system.plant_seed(\n            self.game_manager.player, \n            self.game_manager.player.position, \n            plant_type\n        )\n        \n        if result == InteractionResult.SUCCESS:\n            self.show_message(f"Planted {plant_type}!")\n        elif result == InteractionResult.NO_SEEDS:\n            self.show_message(f"No {self.selected_inventory_item}!")\n        elif result == InteractionResult.ALREADY_PLANTED:\n            self.show_message("Already planted here!")\n        else:\n            self.show_message("Can't plant here!")\n    \n    def water_plant(self):\n        \"\"\"Water plant at current position.\"\"\"\n        result = self.game_manager.plant_system.water_plant(self.game_manager.player.position)\n        \n        if result == InteractionResult.SUCCESS:\n            self.show_message("Plant watered!")\n        else:\n            self.show_message("Nothing to water here!")\n    \n    def harvest_plant(self):\n        \"\"\"Harvest plant at current position.\"\"\"\n        result = self.game_manager.plant_system.harvest_plant(\n            self.game_manager.player, \n            self.game_manager.player.position\n        )\n        \n        if result == InteractionResult.SUCCESS:\n            self.show_message("Harvested!")\n        elif result == InteractionResult.NOT_READY:\n            self.show_message("Plant not ready!")\n        else:\n            self.show_message("Nothing to harvest!")\n    \n    def forage_item(self):\n        \"\"\"Forage item at current position.\"\"\"\n        result = self.game_manager.forage_system.forage_item(\n            self.game_manager.player, \n            self.game_manager.player.position\n        )\n        \n        if result == InteractionResult.SUCCESS:\n            self.show_message("Foraged item!")\n        else:\n            self.show_message("Nothing to forage!")\n    \n    def buy_seeds(self):\n        \"\"\"Buy seeds at seed shop.\"\"\"\n        pos = self.game_manager.player.position\n        if not self.game_manager.storage_system.is_seed_shop_position(pos.x, pos.y):\n            self.show_message("No seed shop here!")\n            return\n        \n        # Buy based on selected inventory item or default to carrot\n        if self.selected_inventory_item and self.selected_inventory_item.endswith("_seeds"):\n            plant_type = self.selected_inventory_item.replace("_seeds", "")\n        else:\n            plant_type = "carrot"  # Default to cheapest seed\n        \n        result = self.game_manager.storage_system.buy_seeds(\n            self.game_manager.player, plant_type, 1\n        )\n        \n        if result == InteractionResult.SUCCESS:\n            self.show_message(f"Bought {plant_type} seeds!")\n        elif result == InteractionResult.NO_MONEY:\n            plant_data = PLANT_REGISTRY.get(plant_type)\n            cost = plant_data.seed_cost if plant_data else 0\n            self.show_message(f"Need ${cost} for {plant_type} seeds!")\n        else:\n            self.show_message("Can't buy seeds!")\n    \n    def ship_items(self):\n        \"\"\"Ship items at shipping container.\"\"\"\n        pos = self.game_manager.player.position\n        if not self.game_manager.storage_system.is_shipping_position(pos.x, pos.y):\n            self.show_message("No shipping container here!")\n            return\n        \n        earnings = self.game_manager.storage_system.ship_items(self.game_manager.player)\n        if earnings > 0:\n            self.show_message(f"Shipped items for ${earnings}!")\n        else:\n            self.show_message("Nothing to ship!")\n    \n    def show_message(self, text: str):\n        \"\"\"Show temporary message.\"\"\"\n        self.message = text\n        self.message_timer = pygame.time.get_ticks() + MESSAGE_DISPLAY_TIME\n    \n    def update(self, delta_time):\n        \"\"\"Update game state.\"\"\"\n        self.game_manager.update(delta_time)\n        \n        # Update message timer\n        if self.message_timer > 0 and pygame.time.get_ticks() > self.message_timer:\n            self.message = ""\n            self.message_timer = 0\n        \n        # Unlock gigantic pumpkin on day 3\n        if (self.game_manager.game_state.day >= 3 and \n            "gigantic_pumpkin" not in self.plant_types):\n            self.plant_types.append("gigantic_pumpkin")\n            self.show_message("Gigantic Pumpkin seeds unlocked!")\n    \n    def draw(self):\n        \"\"\"Draw game screen.\"\"\"\n        self.screen.fill(BLACK)\n        \n        # Draw game elements\n        self.ui.draw_field(self.game_manager, self.selected_inventory_item)\n        self.ui.draw_ui_panel(self.game_manager)\n        self.ui.draw_bottom_inventory(self.game_manager, self.selected_inventory_item)\n        \n        # Draw message if active\n        if self.message:\n            self.ui.draw_message(self.message)\n        \n        # Draw save instructions\n        instructions = [\n            "Ctrl+S: Save to Database",\n            "Ctrl+Q: Save to JSON", \n            "Ctrl+L: Load from JSON",\n            "ESC: Back to Player Select"\n        ]\n        \n        y_pos = 10\n        for instruction in instructions:\n            text_surface = pygame.font.Font(None, 18).render(instruction, True, WHITE)\n            self.screen.blit(text_surface, (WINDOW_WIDTH - 250, y_pos))\n            y_pos += 20\n        \n        pygame.display.flip()\n\nif __name__ == "__main__":\n    game = DatabaseFarmingGame()\n    game.run()